#!/usr/bin/env python

import argparse
import json
import logging
import multiprocessing
import string
import sys
import threading
import time
import random

import flask
import gammu
import yaml
from yaml import Loader

import gunicorn.app.base

is_python3 = sys.version_info.major == 3
if is_python3:
    unicode = str


class ExFlask(flask.Flask):
    sm = None


app = ExFlask(__name__)
sms_queue = multiprocessing.Queue()
sm_lock = multiprocessing.Lock()

config = {
    'server':            {
        'host':    '127.0.0.1',
        'port':    8888,
        'workers': 2,
    },
    'gammu':             {
        'pin': '',
    },
    'receive_whitelist': [],
    'send_blacklist':    [],
    'read_sms':          False,
    'send_async':        False
}


@app.route('/sms', methods=['GET', 'POST'])
def receive_sms():
    n = flask.request.args.get('number')
    if n is not None:
        numbers = n.split(',')
    else:
        logging.error('Could not read phone numbers')
        return json.dumps({'status': 'error', 'message': 'could not read phone numbers'}), 500

    messages = []

    if flask.request.method == 'GET':
        message = flask.request.args.get('message')
        if message:
            messages.append(message)
        else:
            logging.error('Could not read message')
            return json.dumps({'status': 'error', 'message': 'could not read message'}), 500

    if flask.request.method == 'POST':
        try:
            data = json.loads(flask.request.data.decode('utf-8'))
            if 'message' in data and isinstance(data['message'], unicode):
                messages.append(data['message'])
            elif 'messages' in data and isinstance(data['messages'], list):
                for message in data['messages']:
                    if isinstance(message, unicode):
                        messages.append(message)
                    else:
                        logging.warn('Ignored non string value in messages')
            elif 'alerts' in data:
                for alert in data['alerts']:
                    if 'annotations' in alert:
                        messages.append(', '.join(
                            ['%s=%s' % (key, alert['annotations'][key]) for key in alert['annotations'].keys()]))
            else:
                logging.error('Could not read message from JSON')
                return json.dumps({'status': 'error', 'message': 'could not read message from JSON'}), 500
        except ValueError as e:
            logging.error('Could not read POST data (%s)' % e)
            return json.dumps({'status': 'error', 'message': 'could not read JSON data'}), 500

    errors = []
    for number in numbers:
        for i, message in enumerate(messages):
            if config['send_async']:
                send_sms(number, message)
            else:
                try:
                    send_sms_sync(app.sm, number, message)
                except Exception as e:
                    errors.append(str(e))

    if errors:
        return json.dumps({'status': 'error', 'message': "\n".join(errors)}), 500
    return json.dumps({'status': 'ok', 'message': 'messages sent'}), 200


def sms_sender(sm, sm_lock):
    while True:
        data = sms_queue.get()
        try:
            with sm_lock:
                sm.SendSMS(prepare_sms_message(data[0], data[1]))
            logging.info('Successfully sent SMS message to %s' % data[0])
        except Exception as e:
            logging.error('Error while sending SMS message to %s (%s)' % (data[0], e))

        time.sleep(0.1)


def sms_reader(sm, sm_lock):
    while True:
        sms_messages = []

        try:
            with sm_lock:
                start = True
                status = sm.GetSMSStatus()
                remain = status['SIMUsed']
                while remain > 0:
                    if start:
                        sms = sm.GetNextSMS(Start=True, Folder=0)
                        start = False
                    else:
                        sms = sm.GetNextSMS(Location=sms[0]['Location'], Folder=0)
                    sm.DeleteSMS(Location=sms[0]['Location'], Folder=0)
                    remain -= len(sms)
                    sms_messages.append(sms)
        except Exception as e:
            logging.critical('Could not read SMS messages (%s)' % e)

        for sms in sms_messages:
            number = sms[0]['Number']
            text = sms[0]['Text']
            logging.info('Received SMS message from %s' % number)
            read_sms(number, text)

        time.sleep(5)


def send_sms(number, text):
    if number not in config['send_blacklist']:
        sms_queue.put((number, text))
    else:
        logging.error('Could not sent message to %s, number is blacklisted' % number)


def send_sms_sync(sm, number, text):
    if number not in config['send_blacklist']:
        try:
            with sm_lock:
                for msg in prepare_sms_message(number, text):
                    sm.SendSMS(msg)
            logging.info('Successfully sent SMS message to %s' % number)
        except Exception as e:
            logging.error('Error while sending SMS message to %s (%s)' % (number, e))
            raise ValueError('Error while sending SMS message to %s (%s)' % (number, e))
    else:
        logging.error('Could not sent message to %s, number is blacklisted' % number)
        raise ValueError('Could not sent message to %s, number is blacklisted' % number)

def prepare_sms_message(number, text):
    if len(text) > 160:
        # Create SMS info structure
        smsinfo = {
            "Class": -1,
            "Unicode": True,
            "Entries": [
                {
                    "ID":     'ConcatenatedTextLong', #''.join(random.choice(string.ascii_letters) for x in range(20)),
                    "Buffer": text
                }
            ],
        }

        # Encode messages
        encoded = gammu.EncodeSMS(smsinfo)

        # Send messages
        for msg in encoded:
            # Fill in numbers
            msg["SMSC"] = {"Location": 1}
            msg["Number"] = number

            # Actually send the message
            yield msg
    else:
        yield {
                'Number': number,
                'Text':   text,
                'SMSC':   {'Location': 1},
            }

def read_sms(number, text):
    if number in config['receive_whitelist']:
        command = text.lower()
        if command == 'ping':
            send_sms(number, 'PONG')
        elif command == 'pause':
            if number in config['send_blacklist']:
                config['send_blacklist'].remove(number)
                send_sms(number, 'OK')
            else:
                send_sms(number, 'OK')
                config['send_blacklist'].append(number)
        else:
            send_sms(number, 'ERROR')
    else:
        logging.error('Denied access from %s, number is not authorized' % number)


def merge_configs(source, destination):
    for key, value in source.items():
        if isinstance(value, dict):
            node = destination.setdefault(key, {})
            merge_configs(value, node)
        else:
            destination[key] = value

    return destination


def read_config_file(filename):
    try:
        with open(filename, 'r') as stream:
            try:
                yaml_config = yaml.load(stream, Loader=Loader)
            except yaml.YAMLError as e:
                logging.fatal('Configuration file is not a YAML file')
                return False
    except IOError as e:
        logging.fatal('Could not open configuration file (%s)' % e)
        return False

    try:
        merge_configs(yaml_config, config)
    except TypeError as e:
        logging.fatal('Error while reading configuration (%s)' % e)
        return False

    return True


def init_gammu(retry=True):
    # global sm
    sm = gammu.StateMachine()
    if 'config' in config['gammu']:
        sm.SetConfig(0, config['gammu']['config'])
    else:
        sm.ReadConfig()

    logging.info('Initializing Gammu state machine')
    try:
        sm.Init()
    except gammu.ERR_TIMEOUT:
        if retry:
            sm.Abort()
            del sm
            logging.error("sm.Init() failed, retrying after turning on hat...")
            turn_on_hat()
            return init_gammu(False)
        else:
            raise Exception("sm.Init() still fails, exiting.")

    status = sm.GetSecurityStatus()
    if status is None:
        logging.info('PIN code is not required or already entered')
    elif status == 'PIN':
        if config['gammu']['pin'] != '':
            logging.info('Unlocking with PIN code')
            try:
                sm.EnterSecurityCode('PIN', config['gammu']['pin'])
                time.sleep(10)
            except gammu.ERR_SECURITYERROR as e:
                logging.fatal('Failed unlocking with PIN')
                return None
        else:
            logging.fatal('PIN code required but not available in configuration')
            return None
    else:
        logging.fatal('Failed unlocking with PIN,%s is first required' % status)
        return None

    return sm


def create_app():
    logging.basicConfig(stream=sys.stdout, level=logging.DEBUG, format='[%(asctime)s][%(levelname)s] %(message)s',
                        datefmt='%Y-%m-%d %H:%M:%S')

    parser = argparse.ArgumentParser(description='SMS gateway for Gammu',
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-c', '--config', action='store', dest='config', default='/etc/smsgateway.yml',
                        help='Configuration file')
    args = parser.parse_args()

    if not read_config_file(args.config):
        exit(1)

    logging.info('Starting SMS gateway')

    sm = init_gammu()
    if sm is None:
        exit(1)
    app.sm = sm

    if config['send_async'] or config['read_sms']:
        thread_sender = threading.Thread(target=sms_sender, args=(sm, sm_lock))
        thread_sender.setDaemon(True)
        thread_sender.start()

    if config['read_sms']:
        thread_reader = threading.Thread(target=sms_reader, args=(sm, sm_lock))
        thread_reader.setDaemon(True)
        thread_reader.start()

    logging.info('Ready !')
    return app


def turn_on_hat():
    import RPi.GPIO as GPIO
    GPIO.setmode(GPIO.BOARD)
    GPIO.setup(7, GPIO.OUT)
    GPIO.output(7, GPIO.LOW)
    time.sleep(2)
    GPIO.output(7, GPIO.HIGH)
    GPIO.cleanup()
    time.sleep(10)


class StandaloneApplication(gunicorn.app.base.BaseApplication):

    def __init__(self, app, options=None):
        self.options = options or {}
        self.application = app
        super().__init__()

    def load_config(self):
        config = {key: value for key, value in self.options.items()
                  if key in self.cfg.settings and value is not None}
        for key, value in config.items():
            self.cfg.set(key.lower(), value)

    def load(self):
        return self.application


if __name__ == '__main__':
    flask_app = create_app()
    options = {
        'bind':    '%s:%s' % (config['server']['host'], config['server']['port']),
        'workers': int(config['server']['workers']),
    }
    StandaloneApplication(flask_app, options).run()
